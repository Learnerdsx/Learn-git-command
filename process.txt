First:
git init :Use the git init command to turn this directory into a git managed repository.

git add :Tell Git to add files to the repository with the command git add.
Use the git add <file>, note that it can be used repeatedly to add multiple files.
eg:  git add process.txt.
We also can use the  "git add ." Add all the files at once.

git commit :Use git commit to tell Git to commit the file to the repository.
Git commit -m <message> 
eg: git commit -m'Learning for the first time'




Sceond:
git log :The git log command displays commit logs from the most recent to the most distant.
We can also use "git log --pretty=oneline"  command to simplify our message.

git reset:Rollback to the previous version.
eg: git reset --HEAD^

git reflog : Record every command you make.

summary:
1.The version that HEAD points to is the current version, 
so Git allows us to travel through the history of versions using the command Git reset --hard commit_id.

2.you can view the commit history with "git log "to determine which version you want to fall back to.

3.Use"Git reflog" to look at the command history to determine which version to go back to.



Third:
git status :Check the status of your Git repository.





Fourth:
git checkout -- file :
Discard the changes of workspace.Return the file to the state it was at the last Git commit or git add.
eg: git checkout -- process.txt

git reset HEAD <file>:You can undo the changes in the staging area and put them back into the workspace





Fifth:
If you delete a file ,you will have tow options
one is Do delete the file from the repository ,then you can use the command
git rm <file> such as " git rm readme.txt " and use "git commit -m 'messege' ",
the file is now delete from the repository.

The other is you make a mistake ,but  you can easily restore a deleted file to the lasted version
because it is still available in the version library(repository).
you can use "git checkout --<file>" to restore!
git checkout -- <file> actually is replace the version in your workspace with the version in you repository.
Also,you can use git restore <file> to restore the file before you use the command 'git rm <file>',
but if you have used "git rm <file>",you must write the 'git reset'to undo your 'git rm'command.

summary : 
We learn a new command :git rm <file> such as git rm readme.txt.
Warning :Files deleted without ever beign added to the repository are uncoverable!
 



sixth:
